& (bitwise AND)

	

int a = 207;    // In binary: 11001111
int b = 61;     // In binary: 00111101
int c = a & b; // In binary: 00001101
println(c);     // Prints "13", the decimal equivalent to 00001101



Karþýlýk gelen her bit, deðerlerin ikili gösterimi ile karþýlaþtýrýr. Her karþýlaþtýrma için iki 1'in verimi 1, 1 ve 0 verimi 0 ve iki 0'ýn verimi 0. 
Sayýlarýn ikili temsiline baktýðýmýzda görmek kolaydýr

  11010110 // 214
& 01011100 // 92
  --------
  01010100 // 84
 
value & value2

value1 int, char, bayt
value2 int, char, bayt



| (bitwise OR)

	

int a = 205;   // In binary: 11001101
int b = 45;    // In binary: 00101101
int c = a | b; // In binary: 11101101
println(c);    // Prints "237", the decimal equivalent to 11101101

Karþýlýk gelen her bit, deðerlerin ikili gösterimi ile karþýlaþtýrýr. Her bir karþýlaþtýrma için iki 1'in verimi 1, 1 ve 0 verimi 1 ve iki 0'ýn verimi 0.
 Sayýlarýn ikili temsiline baktýðýmýzda görmek kolaydýr

  11010110 // 214
| 01011100 // 92
  --------
  11011110 // 222

value | value2
	
value1 	int, char, byte
value2 	int, char, byte


Büyüktür Kodu

	
int m = 8 >> 3;    // In binary: 1000 to 1
println(m);  // Prints "1"
int n = 256 >> 6;  // In binary: 100000000 to 100 
println(n);  // Prints "4"
int o = 16 >> 3;   // In binary: 10000 to 10 
println(o);  // Prints "2"
int p = 26 >> 1;   // In binary: 11010 to 1101 
println(p);  // Prints "13"


Shifts bits to the right. The number to the left of the operator is shifted the number of places specified by the number to the right.
 Each shift to the right halves the number, therefore each right shift divides the original number by 2.
 Use the right shift for fast divisions or to extract an individual number from a packed number. 
Right shifting only works with integers or numbers which automatically convert to an integer such at byte and char.

Bit shifting is helpful when using the color data type. A right shift can extract red, green, blue, and alpha values from a color.
 A left shift can be used to quickly reassemble a color value (more quickly than the color() function).

	

value >> n


value: vardiya deðeri
n : saða kaydýrýlacak yer sayýsý


Küçüktür Kodu


	
int m = 1 << 3;   // In binary: 1 to 1000
println(m);  // Prints "8"
int n = 1 << 8;   // In binary: 1 to 100000000
println(n);  // Prints "256"
int o = 2 << 3;   // In binary: 10 to 10000
println(o);  // Prints "16"
int p = 13 << 1;  // In binary: 1101 to 11010
println(p);  // Prints "26"

Sola bitleri kaydýrýr. Operatörün solundaki sayý, numara ile belirtilen yerlerin sayýsýný saða kaydýrýr. 
Soldaki her vardiya, sayýyý ikiye katlar, bu nedenle her bir sol vardiya, orijinal numarayý 2 ile çarpýr. 
Hýzlý çarpma için veya bir sayý grubunu birlikte daha büyük bir sayýya paketlemek için sol vardiyayý kullanýn. 
	

value << n

value: vardiya deðeri
n : sola kaydýrýlacak yer sayýsý


 